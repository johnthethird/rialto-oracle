{
  "address": "0xe4c0cbb1c6297e84c03436b25C9C0E6523bB06E8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_eternalStorage",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "PChainBalanceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "eternalStorage",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPChainBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "setPChainBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x28f00e76c67a8f656848d092d5149189efa2466d7aee70aae5ee0225745e9ff4",
  "receipt": {
    "to": null,
    "from": "0xe757FdF984e0e4F3B5cC2F049Dc4A3b228A10421",
    "contractAddress": "0xe4c0cbb1c6297e84c03436b25C9C0E6523bB06E8",
    "transactionIndex": 4,
    "gasUsed": "479476",
    "logsBloom": "0x
    "blockHash": "0xff57cc49300feb95232dd063f22c46fd212653809fbc90e9b3def5b27e4eae30",
    "transactionHash": "0x28f00e76c67a8f656848d092d5149189efa2466d7aee70aae5ee0225745e9ff4",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 7477961,
        "transactionHash": "0x28f00e76c67a8f656848d092d5149189efa2466d7aee70aae5ee0225745e9ff4",
        "address": "0xe4c0cbb1c6297e84c03436b25C9C0E6523bB06E8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e757fdf984e0e4f3b5cc2f049dc4a3b228a10421"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0xff57cc49300feb95232dd063f22c46fd212653809fbc90e9b3def5b27e4eae30"
      }
    ],
    "blockNumber": 7477961,
    "cumulativeGasUsed": "2293817",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x51739Ac9EA307Bce4568aB54eE6B7D8dA83403C6"
  ],
  "solcInputHash": "04a021426e621bac33f5b68947e49c7b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_eternalStorage\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"PChainBalanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eternalStorage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPChainBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setPChainBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Oracle.sol\":\"Oracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/EternalStorage.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract EternalStorage is Ownable {\\n  address public latestVersion;\\n\\n  string private constant ERROR_LATESTVERSION = \\\"only latestVersion can call update this contract\\\";\\n\\n  mapping(bytes32 => address) AddressStorage;\\n  mapping(bytes32 => bool) BooleanStorage;\\n  mapping(bytes32 => bytes) BytesStorage;\\n  mapping(bytes32 => int256) IntStorage;\\n  mapping(bytes32 => string) StringStorage;\\n  mapping(bytes32 => uint256) UIntStorage;\\n\\n  modifier onlyLatestVersion() {\\n    require(msg.sender == latestVersion, ERROR_LATESTVERSION);\\n    _;\\n  }\\n\\n  function upgradeVersion(address _newVersion) public onlyOwner {\\n    latestVersion = _newVersion;\\n  }\\n\\n  function getAddressValue(bytes32 record) public view returns (address) {\\n    return AddressStorage[record];\\n  }\\n\\n  function getBooleanValue(bytes32 record) public view returns (bool) {\\n    return BooleanStorage[record];\\n  }\\n\\n  function getBytesValue(bytes32 record) public view returns (bytes memory) {\\n    return BytesStorage[record];\\n  }\\n\\n  function getIntValue(bytes32 record) public view returns (int256) {\\n    return IntStorage[record];\\n  }\\n\\n  function getStringValue(bytes32 record) public view returns (string memory) {\\n    return StringStorage[record];\\n  }\\n\\n  function getUIntValue(bytes32 record) public view returns (uint256) {\\n    return UIntStorage[record];\\n  }\\n\\n  function setAddressValue(bytes32 record, address value) public onlyLatestVersion {\\n    AddressStorage[record] = value;\\n  }\\n\\n  function setBooleanValue(bytes32 record, bool value) public onlyLatestVersion {\\n    BooleanStorage[record] = value;\\n  }\\n\\n  function setBytesValue(bytes32 record, bytes memory value) public onlyLatestVersion {\\n    BytesStorage[record] = value;\\n  }\\n\\n  function setIntValue(bytes32 record, int256 value) public onlyLatestVersion {\\n    IntStorage[record] = value;\\n  }\\n\\n  function setStringValue(bytes32 record, string memory value) public onlyLatestVersion {\\n    StringStorage[record] = value;\\n  }\\n\\n  function setUIntValue(bytes32 record, uint256 value) public onlyLatestVersion {\\n    UIntStorage[record] = value;\\n  }\\n\\n  function deleteUint(bytes32 _key) public onlyLatestVersion {\\n    delete UIntStorage[_key];\\n  }\\n\\n  function deleteString(bytes32 _key) public onlyLatestVersion {\\n    delete StringStorage[_key];\\n  }\\n\\n  function deleteAddress(bytes32 _key) public onlyLatestVersion {\\n    delete AddressStorage[_key];\\n  }\\n\\n  function deleteBytes(bytes32 _key) public onlyLatestVersion {\\n    delete BytesStorage[_key];\\n  }\\n\\n  function deleteBool(bytes32 _key) public onlyLatestVersion {\\n    delete BooleanStorage[_key];\\n  }\\n\\n  function deleteInt(bytes32 _key) public onlyLatestVersion {\\n    delete IntStorage[_key];\\n  }\\n}\\n\",\"keccak256\":\"0x83e7d2951b8f14033222230581c7622d904208e4ab48646fcf306bb6d00d6196\",\"license\":\"Unlicense\"},\"contracts/Oracle.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EternalStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\ncontract Oracle is Ownable, Pausable {\\n  address public eternalStorage;\\n\\n  bytes32 private constant pChainBalanceKey = keccak256(abi.encodePacked(\\\"pchainbalance\\\"));\\n\\n  event PChainBalanceChanged(uint256 _value);\\n\\n  constructor(address _eternalStorage) {\\n    eternalStorage = _eternalStorage;\\n  }\\n\\n  function getPChainBalance() public view returns (uint256) {\\n    return EternalStorage(eternalStorage).getUIntValue(pChainBalanceKey);\\n  }\\n\\n  function setPChainBalance(uint256 _value) public onlyOwner whenNotPaused {\\n    EternalStorage(eternalStorage).setUIntValue(pChainBalanceKey, _value);\\n    emit PChainBalanceChanged(_value);\\n  }\\n\\n  function pause() public onlyOwner {\\n    _pause();\\n  }\\n\\n  function unpause() public onlyOwner {\\n    _unpause();\\n  }\\n}\\n\",\"keccak256\":\"0xcbb3a500476f6f237c33eed353d95a2e01db23e6b40bcbedf8e02529a754070e\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516107c53803806107c583398101604081905261002f916100ba565b6100383361006a565b6000805460ff60a01b19169055600180546001600160a01b0319166001600160a01b03929092169190911790556100e8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100cb578081fd5b81516001600160a01b03811681146100e1578182fd5b9392505050565b6106ce806100f76000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80638456cb59116100665780638456cb59146100df5780638da5cb5b146100e757806398ff9c541461010c578063cc911f9a1461011f578063f2fde38b1461013557600080fd5b80633f4ba83a1461009857806346482002146100a25780635c975abb146100b5578063715018a6146100d7575b600080fd5b6100a0610148565b005b6100a06100b0366004610633565b610185565b600054600160a01b900460ff1660405190151581526020015b60405180910390f35b6100a06102d4565b6100a0610308565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100ce565b6001546100f4906001600160a01b031681565b61012761033a565b6040519081526020016100ce565b6100a0610143366004610605565b6103f5565b6000546001600160a01b0316331461017b5760405162461bcd60e51b815260040161017290610663565b60405180910390fd5b610183610490565b565b6000546001600160a01b031633146101af5760405162461bcd60e51b815260040161017290610663565b600054600160a01b900460ff16156101fc5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610172565b6001546040516c70636861696e62616c616e636560981b60208201526001600160a01b0390911690633562fd2090602d0160408051601f198184030181529082905280516020909101206001600160e01b031960e084901b168252600482015260248101849052604401600060405180830381600087803b15801561028057600080fd5b505af1158015610294573d6000803e3d6000fd5b505050507f94e979aa09eee1b08be464f42c05ac279e177fafc6c9056af12e4adb506afdf4816040516102c991815260200190565b60405180910390a150565b6000546001600160a01b031633146102fe5760405162461bcd60e51b815260040161017290610663565b610183600061052d565b6000546001600160a01b031633146103325760405162461bcd60e51b815260040161017290610663565b61018361057d565b6001546040516c70636861696e62616c616e636560981b60208201526000916001600160a01b03169063bdc963d890602d01604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016103a091815260200190565b60206040518083038186803b1580156103b857600080fd5b505afa1580156103cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f0919061064b565b905090565b6000546001600160a01b0316331461041f5760405162461bcd60e51b815260040161017290610663565b6001600160a01b0381166104845760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610172565b61048d8161052d565b50565b600054600160a01b900460ff166104e05760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610172565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600054600160a01b900460ff16156105ca5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610172565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586105103390565b600060208284031215610616578081fd5b81356001600160a01b038116811461062c578182fd5b9392505050565b600060208284031215610644578081fd5b5035919050565b60006020828403121561065c578081fd5b5051919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fea2646970667358221220d4acf8c3fb9d544a1bc7d34faeca5e57dd784e88bd864c0d3fb02c2c1303ec8c64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c80638456cb59116100665780638456cb59146100df5780638da5cb5b146100e757806398ff9c541461010c578063cc911f9a1461011f578063f2fde38b1461013557600080fd5b80633f4ba83a1461009857806346482002146100a25780635c975abb146100b5578063715018a6146100d7575b600080fd5b6100a0610148565b005b6100a06100b0366004610633565b610185565b600054600160a01b900460ff1660405190151581526020015b60405180910390f35b6100a06102d4565b6100a0610308565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100ce565b6001546100f4906001600160a01b031681565b61012761033a565b6040519081526020016100ce565b6100a0610143366004610605565b6103f5565b6000546001600160a01b0316331461017b5760405162461bcd60e51b815260040161017290610663565b60405180910390fd5b610183610490565b565b6000546001600160a01b031633146101af5760405162461bcd60e51b815260040161017290610663565b600054600160a01b900460ff16156101fc5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610172565b6001546040516c70636861696e62616c616e636560981b60208201526001600160a01b0390911690633562fd2090602d0160408051601f198184030181529082905280516020909101206001600160e01b031960e084901b168252600482015260248101849052604401600060405180830381600087803b15801561028057600080fd5b505af1158015610294573d6000803e3d6000fd5b505050507f94e979aa09eee1b08be464f42c05ac279e177fafc6c9056af12e4adb506afdf4816040516102c991815260200190565b60405180910390a150565b6000546001600160a01b031633146102fe5760405162461bcd60e51b815260040161017290610663565b610183600061052d565b6000546001600160a01b031633146103325760405162461bcd60e51b815260040161017290610663565b61018361057d565b6001546040516c70636861696e62616c616e636560981b60208201526000916001600160a01b03169063bdc963d890602d01604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016103a091815260200190565b60206040518083038186803b1580156103b857600080fd5b505afa1580156103cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f0919061064b565b905090565b6000546001600160a01b0316331461041f5760405162461bcd60e51b815260040161017290610663565b6001600160a01b0381166104845760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610172565b61048d8161052d565b50565b600054600160a01b900460ff166104e05760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610172565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600054600160a01b900460ff16156105ca5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610172565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586105103390565b600060208284031215610616578081fd5b81356001600160a01b038116811461062c578182fd5b9392505050565b600060208284031215610644578081fd5b5035919050565b60006020828403121561065c578081fd5b5051919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fea2646970667358221220d4acf8c3fb9d544a1bc7d34faeca5e57dd784e88bd864c0d3fb02c2c1303ec8c64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Oracle.sol:Oracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/Oracle.sol:Oracle",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 534,
        "contract": "contracts/Oracle.sol:Oracle",
        "label": "eternalStorage",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}