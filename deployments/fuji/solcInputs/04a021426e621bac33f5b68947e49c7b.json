{
  "language": "Solidity",
  "sources": {
    "contracts/EternalStorage.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract EternalStorage is Ownable {\n  address public latestVersion;\n\n  string private constant ERROR_LATESTVERSION = \"only latestVersion can call update this contract\";\n\n  mapping(bytes32 => address) AddressStorage;\n  mapping(bytes32 => bool) BooleanStorage;\n  mapping(bytes32 => bytes) BytesStorage;\n  mapping(bytes32 => int256) IntStorage;\n  mapping(bytes32 => string) StringStorage;\n  mapping(bytes32 => uint256) UIntStorage;\n\n  modifier onlyLatestVersion() {\n    require(msg.sender == latestVersion, ERROR_LATESTVERSION);\n    _;\n  }\n\n  function upgradeVersion(address _newVersion) public onlyOwner {\n    latestVersion = _newVersion;\n  }\n\n  function getAddressValue(bytes32 record) public view returns (address) {\n    return AddressStorage[record];\n  }\n\n  function getBooleanValue(bytes32 record) public view returns (bool) {\n    return BooleanStorage[record];\n  }\n\n  function getBytesValue(bytes32 record) public view returns (bytes memory) {\n    return BytesStorage[record];\n  }\n\n  function getIntValue(bytes32 record) public view returns (int256) {\n    return IntStorage[record];\n  }\n\n  function getStringValue(bytes32 record) public view returns (string memory) {\n    return StringStorage[record];\n  }\n\n  function getUIntValue(bytes32 record) public view returns (uint256) {\n    return UIntStorage[record];\n  }\n\n  function setAddressValue(bytes32 record, address value) public onlyLatestVersion {\n    AddressStorage[record] = value;\n  }\n\n  function setBooleanValue(bytes32 record, bool value) public onlyLatestVersion {\n    BooleanStorage[record] = value;\n  }\n\n  function setBytesValue(bytes32 record, bytes memory value) public onlyLatestVersion {\n    BytesStorage[record] = value;\n  }\n\n  function setIntValue(bytes32 record, int256 value) public onlyLatestVersion {\n    IntStorage[record] = value;\n  }\n\n  function setStringValue(bytes32 record, string memory value) public onlyLatestVersion {\n    StringStorage[record] = value;\n  }\n\n  function setUIntValue(bytes32 record, uint256 value) public onlyLatestVersion {\n    UIntStorage[record] = value;\n  }\n\n  function deleteUint(bytes32 _key) public onlyLatestVersion {\n    delete UIntStorage[_key];\n  }\n\n  function deleteString(bytes32 _key) public onlyLatestVersion {\n    delete StringStorage[_key];\n  }\n\n  function deleteAddress(bytes32 _key) public onlyLatestVersion {\n    delete AddressStorage[_key];\n  }\n\n  function deleteBytes(bytes32 _key) public onlyLatestVersion {\n    delete BytesStorage[_key];\n  }\n\n  function deleteBool(bytes32 _key) public onlyLatestVersion {\n    delete BooleanStorage[_key];\n  }\n\n  function deleteInt(bytes32 _key) public onlyLatestVersion {\n    delete IntStorage[_key];\n  }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/Oracle.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\nimport \"./EternalStorage.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\n\ncontract Oracle is Ownable, Pausable {\n  address public eternalStorage;\n\n  bytes32 private constant pChainBalanceKey = keccak256(abi.encodePacked(\"pchainbalance\"));\n\n  event PChainBalanceChanged(uint256 _value);\n\n  constructor(address _eternalStorage) {\n    eternalStorage = _eternalStorage;\n  }\n\n  function getPChainBalance() public view returns (uint256) {\n    return EternalStorage(eternalStorage).getUIntValue(pChainBalanceKey);\n  }\n\n  function setPChainBalance(uint256 _value) public onlyOwner whenNotPaused {\n    EternalStorage(eternalStorage).setUIntValue(pChainBalanceKey, _value);\n    emit PChainBalanceChanged(_value);\n  }\n\n  function pause() public onlyOwner {\n    _pause();\n  }\n\n  function unpause() public onlyOwner {\n    _unpause();\n  }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x00000000d41867734bbee4c6863d9255b2b06ac1"
      }
    }
  }
}